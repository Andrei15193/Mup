using System.Threading;
using System.Threading.Tasks;

namespace Mup
{
    /// <summary>A common interface for the result of all markup parsers.</summary>
    public interface IParseTree
    {
        /// <summary>Accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        void Accept(ParseTreeVisitor visitor);

        /// <summary>Accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <typeparam name="TResult">The result type that the <paramref name="visitor"/> generates.</typeparam>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        /// <returns>Returns the result generated by the <paramref name="visitor"/>.</returns>
        TResult Accept<TResult>(ParseTreeVisitor<TResult> visitor);

        /// <summary>Asynchronously accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        Task AcceptAsync(ParseTreeVisitor visitor);

        /// <summary>Asynchronously accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        /// <param name="cancellationToken">A token that can be used to signal a cancellation request.</param>
        Task AcceptAsync(ParseTreeVisitor visitor, CancellationToken cancellationToken);

        /// <summary>Asynchronously accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <typeparam name="TResult">The result type that the <paramref name="visitor"/> generates.</typeparam>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        /// <returns>Returns the result generated by the <paramref name="visitor"/>.</returns>
        Task<TResult> AcceptAsync<TResult>(ParseTreeVisitor<TResult> visitor);

        /// <summary>Asynchronously accepts a <paramref name="visitor"/> which can be used to generate output from the parse tree.</summary>
        /// <typeparam name="TResult">The result type that the <paramref name="visitor"/> generates.</typeparam>
        /// <param name="visitor">The visitor that will traverse the parse tree.</param>
        /// <param name="cancellationToken">A token that can be used to signal a cancellation request.</param>
        /// <returns>Returns the result generated by the <paramref name="visitor"/>.</returns>
        Task<TResult> AcceptAsync<TResult>(ParseTreeVisitor<TResult> visitor, CancellationToken cancellationToken);
    }
}