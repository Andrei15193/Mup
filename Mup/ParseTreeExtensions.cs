using System.Threading;
using System.Threading.Tasks;

namespace Mup
{
    /// <summary>A helper class containing extension methods for <see cref="IParseTree"/>.</summary>
    public static class ParseTreeExtensions
    {
        /// <summary>Uses the given <paramref name="visitor"/> to visit the parse tree as soon as the parse operation completes.</summary>
        /// <param name="parseTask">The task generated from calling any of the ParseAsync methods on a <see cref="IMarkupParser"/>.</param>
        /// <param name="visitor">The visitor to use for traversing the resulting parse tree.</param>
        public static Task With(this Task<IParseTree> parseTask, ParseTreeVisitor visitor)
            => parseTask.With(visitor, CancellationToken.None);

        /// <summary>Uses the given <paramref name="visitor"/> to visit the parse tree as soon as the parse operation completes.</summary>
        /// <param name="parseTask">The task generated from calling any of the ParseAsync methods on a <see cref="IMarkupParser"/>.</param>
        /// <param name="visitor">The visitor to use for traversing the resulting parse tree.</param>
        /// <param name="cancellationToken">A token that can be used to signal a cancellation request.</param>
        public static async Task With(this Task<IParseTree> parseTask, ParseTreeVisitor visitor, CancellationToken cancellationToken)
        {
            var parseTree = await parseTask.ConfigureAwait(false);
            await parseTree.AcceptAsync(visitor, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>Uses the given <paramref name="visitor"/> to transform the parse tree.</summary>
        /// <typeparam name="TResult">The type which is constructed after visitng a parse tree.</typeparam>
        /// <param name="parseTask">The task generated from calling any of the ParseAsync methods on a <see cref="IMarkupParser"/>.</param>
        /// <param name="visitor">The visitor to use when transforming the parse tree.</param>
        /// <returns>Returns the result that is generated by the visitor.</returns>
        public static Task<TResult> With<TResult>(this Task<IParseTree> parseTask, ParseTreeVisitor<TResult> visitor)
            => parseTask.With(visitor, CancellationToken.None);

        /// <summary>Uses the given <paramref name="visitor"/> to transform the parse tree.</summary>
        /// <typeparam name="TResult">The type which is constructed after visitng a parse tree.</typeparam>
        /// <param name="parseTask">The task generated from calling any of the ParseAsync methods on a <see cref="IMarkupParser"/>.</param>
        /// <param name="visitor">The visitor to use when transforming the parse tree.</param>
        /// <param name="cancellationToken">A token that can be used to signal a cancellation request.</param>
        /// <returns>Returns the result that is generated by the visitor.</returns>
        public static async Task<TResult> With<TResult>(this Task<IParseTree> parseTask, ParseTreeVisitor<TResult> visitor, CancellationToken cancellationToken)
        {
            var parseTree = await parseTask.ConfigureAwait(false);
            var result = await parseTree.AcceptAsync(visitor, cancellationToken).ConfigureAwait(false);
            return result;
        }
    }
}